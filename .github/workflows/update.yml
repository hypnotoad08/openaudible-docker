name: Scheduled Update

on:
  schedule:
    - cron: "0 3 * * *"
  push:
    paths-ignore:
      - "**.md"
      - "**.yaml"
  pull_request:
  workflow_dispatch:

jobs:
  do-stuff-pretty-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Check versions
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch latest release tag with authentication
          RELEASE_TAG=$(curl -sfH "Authorization: Bearer ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/openaudible/openaudible/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          if [ -z "${RELEASE_TAG}" ]; then
            echo "**** Can't retrieve external release, exiting ****"
            exit 1
          fi
          
          # Extract version number (handle with or without 'v' prefix)
          EXT_RELEASE=$(echo "${RELEASE_TAG}" | sed -E 's/^v?(.+)/\1/')
          
          if [ -z "${EXT_RELEASE}" ]; then
            echo "**** Can't parse release version, exiting ****"
            exit 1
          fi
          
          # Extract OA_VERSION from Dockerfile (handle ARG or ENV with quoted and unquoted values)
          IMAGE_VERSION=$(grep -E '^(ARG|ENV) OA_VERSION=' Dockerfile | head -1 | sed -E 's/.*OA_VERSION=(["\x27]?)([^"\x27]+)\1.*/\2/')
          
          if [ -z "${IMAGE_VERSION}" ]; then
            echo "**** Can't retrieve last pushed version, exiting ****"
            exit 1
          fi
          
          if [ "${EXT_RELEASE}" == "${IMAGE_VERSION}" ]; then
            echo "**** Version ${EXT_RELEASE} already pushed, exiting ****"
            exit 0
          fi
          
          # Validate upstream release asset URL exists
          ASSET_URL="https://github.com/openaudible/openaudible/releases/download/v${EXT_RELEASE}/OpenAudible_${EXT_RELEASE}_x86_64.sh"
          if curl -sfI "${ASSET_URL}" > /dev/null; then
            echo "**** New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering update. ****"
            # Update ARG OA_VERSION line specifically (handles both ARG and ENV formats)
            sed -i "s/^\(ARG OA_VERSION=\)${IMAGE_VERSION}/\1${EXT_RELEASE}/" Dockerfile
            sed -i "s/^\(ENV OA_VERSION=\)${IMAGE_VERSION}/\1${EXT_RELEASE}/" Dockerfile
            echo "update=true" >> "$GITHUB_OUTPUT"
            echo "tag=${EXT_RELEASE}" >> "$GITHUB_OUTPUT"
          else
            echo "**** New version ${EXT_RELEASE} found; URL invalid ****"
            exit 1
          fi

      - name: Commit Update
        id: commit
        if: 'steps.check.outputs.update'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update to ${{ steps.check.outputs.tag }}"
          git push

      - name: Login to image repository
        id: login
        if: 'steps.check.outputs.update'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push
        id: push
        if: 'steps.check.outputs.update'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ secrets.REGISTRY_USER }}/openaudible-docker:latest
            ghcr.io/${{ secrets.REGISTRY_USER }}/openaudible-docker:${{ steps.check.outputs.tag }}
          labels: maintainer=${{ secrets.REGISTRY_USER }}
